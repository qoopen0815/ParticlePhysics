#pragma kernel BuildGridCS
#pragma kernel ClearGridIndicesCS
#pragma kernel BuildGridIndicesCS
#pragma kernel RearrangeParticlesCS

#pragma enable_d3d11_debug_symbols

#define THREAD_SIZE_X 1024

#include "./Include/GridSearch.cginc"
#include "./Include/Particle.cginc"

StructuredBuffer<uint2> _GridBufferRead;
RWStructuredBuffer<uint2> _GridBufferWrite;

float4x4 _GridTF = MAT4x4_IDENTITY;
//float3 _GridPos = float3(0, 0, 0);

//--------------------------------------------------------------------------------------
// Build Grid : 各パーティクルの属するセルを計算し、紐づけてGridBufferに保存
//--------------------------------------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void BuildGridCS(uint3 DTid : SV_DispatchThreadID)
{
	const uint P_ID = DTid.x; // Particle ID to operate on

	float3 position = _ParticleBufferRead[P_ID].position;
	float3 grid_xyz = GridCalculateCell(position, _GridTF);
	
	//_GridBufferWrite[P_ID] = MakeKeyValuePair((uint3) grid_xyz, P_ID);

	if (grid_xyz.x < 0 | grid_xyz.y < 0 | grid_xyz.z < 0)
	{
		_GridBufferWrite[P_ID] = uint2(0xffffff, P_ID);
	}
	else
	{
		_GridBufferWrite[P_ID] = MakeKeyValuePair((uint3) grid_xyz, P_ID);
	}
}

//--------------------------------------------------------------------------------------
// Build Grid Indices : ソート済みのパーティクルハッシュに対して、始まりと終わりを記録
//--------------------------------------------------------------------------------------
// 0000011111122222334444 を
//       0 1  2  3  4
// start 0 5  11 16 18
// end   4 10 15 17 21
// に変換

[numthreads(THREAD_SIZE_X, 1, 1)]
void ClearGridIndicesCS(uint3 DTid : SV_DispatchThreadID)
{
	// グリッドの個数分
	_GridIndicesBufferWrite[DTid.x] = uint2(0, 0);
}

[numthreads(THREAD_SIZE_X, 1, 1)]
void BuildGridIndicesCS(uint3 DTid : SV_DispatchThreadID)
{
	// パーティクルの個数分
	const uint P_ID = DTid.x;

	// 1個前のパーティクルIDを計算
	uint P_ID_PREV = (P_ID == 0) ? (uint) _ParticleNum : P_ID;
	P_ID_PREV--;

	// 1個後のパーティクルIDを計算
	uint P_ID_NEXT = P_ID + 1;
	if (P_ID_NEXT == (uint) _ParticleNum)
	{
		P_ID_NEXT = 0;
	}

	// ソート済みのGrid-Particleバッファから
	// 自分がいるグリッドを計算する
	uint cell = GridGetKey(_GridBufferRead[P_ID]); // ソートされたグリッドIDの取得
	uint cell_prev = GridGetKey(_GridBufferRead[P_ID_PREV]);
	uint cell_next = GridGetKey(_GridBufferRead[P_ID_NEXT]);

	// 前後セルインデックスと異なる場合記録
	if (cell != cell_prev)
	{
		// 新しいセルインデックスの始まりの配列インデックス
		_GridIndicesBufferWrite[cell].x = P_ID;
	}

	if (cell != cell_next)
	{
		// 新しいセルインデックスの終わりの配列インデックス
		_GridIndicesBufferWrite[cell].y = P_ID + 1;
	}
}

[numthreads(THREAD_SIZE_X, 1, 1)]
void RearrangeParticlesCS(uint3 DTid : SV_DispatchThreadID)
{
	const unsigned int id = DTid.x; // Particle ID to operate on
	const unsigned int P_ID = GridGetValue(_GridBufferRead[id]);
	_ParticleBufferWrite[id] = _ParticleBufferRead[P_ID]; // ソート済みに並び替える
}
