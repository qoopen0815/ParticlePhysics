{
  "api/ParticlePhysics.Enum.html": {
    "href": "api/ParticlePhysics.Enum.html",
    "title": "Namespace ParticlePhysics.Enum | Particle Physics",
    "keywords": "Namespace ParticlePhysics.Enum Enums ParticleNum Represents the available particle numbers as an enumeration. ParticleType"
  },
  "api/ParticlePhysics.Enum.ParticleNum.html": {
    "href": "api/ParticlePhysics.Enum.ParticleNum.html",
    "title": "Enum ParticleNum | Particle Physics",
    "keywords": "Enum ParticleNum Represents the available particle numbers as an enumeration. Namespace : ParticlePhysics.Enum Assembly : cs.temp.dll.dll Syntax public enum ParticleNum Fields Name Description NUM_128K NUM_16K NUM_256K NUM_32K NUM_64K NUM_8K"
  },
  "api/ParticlePhysics.Enum.ParticleType.html": {
    "href": "api/ParticlePhysics.Enum.ParticleType.html",
    "title": "Enum ParticleType | Particle Physics",
    "keywords": "Enum ParticleType Namespace : ParticlePhysics.Enum Assembly : cs.temp.dll.dll Syntax public enum ParticleType Fields Name Description Cube Simple Tetrahedron"
  },
  "api/ParticlePhysics.html": {
    "href": "api/ParticlePhysics.html",
    "title": "Namespace ParticlePhysics | Particle Physics",
    "keywords": "Namespace ParticlePhysics Classes ParticleBuffer Represents a buffer to hold particle data for particle-based physics simulations. TerrainBuffer Structs ParticleElement Represents a particle element with properties such as radius, mass, and offset from the particle center. ParticleState Represents the state of a particle. TerrainType"
  },
  "api/ParticlePhysics.ParticleBuffer.html": {
    "href": "api/ParticlePhysics.ParticleBuffer.html",
    "title": "Class ParticleBuffer | Particle Physics",
    "keywords": "Class ParticleBuffer Represents a buffer to hold particle data for particle-based physics simulations. Inheritance Object ParticleBuffer Namespace : ParticlePhysics Assembly : cs.temp.dll.dll Syntax public class ParticleBuffer Constructors ParticleBuffer(Int32) Initializes a new instance of the ParticleBuffer class with the specified number of particles. Declaration public ParticleBuffer(int particleNum) Parameters Type Name Description Int32 particleNum Fields num The number of particles in the buffer. Declaration public readonly int num Field Value Type Description Int32 status The graphics buffer to store particle state data. Declaration public GraphicsBuffer status Field Value Type Description GraphicsBuffer substance The substance associated with the particles. Declaration public ParticleSubstance substance Field Value Type Description ParticleSubstance Methods Release() Releases the resources held by the particle buffer. Declaration public void Release() SetAsCubeParticle(ParticleState[], Single, Single, Single) Creates a new ParticleBuffer and sets it up as cube particles with the given parameters. Declaration public static ParticleBuffer SetAsCubeParticle(ParticleState[] particles, float radius = 0.04F, float density = 2000F, float mu = 0.05F) Parameters Type Name Description ParticleState [] particles An array of particle states. Single radius The radius of the particles. (Optional) Single density The density of the particles. (Optional) Single mu The friction coefficient of the particles. (Optional) Returns Type Description ParticleBuffer The created particle buffer. SetAsSimpleParticle(ParticleState[], Single, Single, Single) Creates a new ParticleBuffer and sets it up as simple particles with the given parameters. Declaration public static ParticleBuffer SetAsSimpleParticle(ParticleState[] particles, float radius = 0.04F, float density = 2000F, float mu = 0.05F) Parameters Type Name Description ParticleState [] particles An array of particle states. Single radius The radius of the particles. (Optional) Single density The density of the particles. (Optional) Single mu The friction coefficient of the particles. (Optional) Returns Type Description ParticleBuffer The created particle buffer. SetAsTetrahedronParticle(ParticleState[], Single, Single, Single) Creates a new ParticleBuffer and sets it up as tetrahedron particles with the given parameters. Declaration public static ParticleBuffer SetAsTetrahedronParticle(ParticleState[] particles, float radius = 0.04F, float density = 2000F, float mu = 0.05F) Parameters Type Name Description ParticleState [] particles An array of particle states. Single radius The radius of the particles. (Optional) Single density The density of the particles. (Optional) Single mu The friction coefficient of the particles. (Optional) Returns Type Description ParticleBuffer The created particle buffer."
  },
  "api/ParticlePhysics.ParticleElement.html": {
    "href": "api/ParticlePhysics.ParticleElement.html",
    "title": "Struct ParticleElement | Particle Physics",
    "keywords": "Struct ParticleElement Represents a particle element with properties such as radius, mass, and offset from the particle center. Namespace : ParticlePhysics Assembly : cs.temp.dll.dll Syntax public struct ParticleElement Constructors ParticleElement(Single, Single, Vector3) Initializes a new instance of the ParticleElement struct with the specified parameters. Declaration public ParticleElement(float radius, float mass, Vector3 offsetFromParticleCenter) Parameters Type Name Description Single radius The radius of the particle element. Single mass The mass of the particle element. Vector3 offsetFromParticleCenter The offset of the particle element from the particle center in local coordinates. Fields mass The mass of the particle element. Declaration public float mass Field Value Type Description Single offsetFromParticleCenter The offset of the particle element from the particle center in local coordinates. Declaration public Vector3 offsetFromParticleCenter Field Value Type Description Vector3 radius The radius of the particle element. Declaration public float radius Field Value Type Description Single"
  },
  "api/ParticlePhysics.ParticleState.html": {
    "href": "api/ParticlePhysics.ParticleState.html",
    "title": "Struct ParticleState | Particle Physics",
    "keywords": "Struct ParticleState Represents the state of a particle. Namespace : ParticlePhysics Assembly : cs.temp.dll.dll Syntax public struct ParticleState Fields angularVelocity The angular velocity of the particle. Declaration public Vector3 angularVelocity Field Value Type Description Vector3 isActive Indicates if the particle is active. 0: false, 1: true. Declaration public uint isActive Field Value Type Description UInt32 orientation The orientation of the particle represented by a Quaternion in the form of a Vector4 (x, y, z, w). Declaration public Vector4 orientation Field Value Type Description Vector4 position The position of the particle in 3D space. Declaration public Vector3 position Field Value Type Description Vector3 velocity The velocity of the particle in 3D space. Declaration public Vector3 velocity Field Value Type Description Vector3 Methods GenerateCube(Int32, Vector3, Single) Generates an array of particles distributed within a cube with a specific center and size. Declaration public static ParticleState[] GenerateCube(int particleNum, Vector3 centerPos, float size) Parameters Type Name Description Int32 particleNum The number of particles to generate. Vector3 centerPos The center position for generating particles. Single size The size of the cube. Returns Type Description ParticleState [] An array of ParticleState representing the generated particles. GenerateFromGameObject(GameObject) Generates an array of particles on the surface of a mesh attached to the given GameObject. Declaration public static ParticleState[] GenerateFromGameObject(GameObject obj) Parameters Type Name Description GameObject obj The GameObject with a mesh to generate particles from. Returns Type Description ParticleState [] An array of ParticleState representing the generated particles. GenerateFromMesh(Mesh) Generates an array of particles on the surface of a given mesh. Declaration public static ParticleState[] GenerateFromMesh(Mesh mesh) Parameters Type Name Description Mesh mesh The mesh to generate particles from. Returns Type Description ParticleState [] An array of ParticleState representing the generated particles. GeneratePoint(Int32, Vector3) Generates an array of particles at a specific center position, with default values for velocity and orientation. Declaration public static ParticleState[] GeneratePoint(int particleNum, Vector3 centerPos) Parameters Type Name Description Int32 particleNum The number of particles to generate. Vector3 centerPos The center position for generating particles. Returns Type Description ParticleState [] An array of ParticleState representing the generated particles. GenerateSphere(Int32, Vector3, Single) Generates an array of particles distributed within a sphere with a specific center and radius. Declaration public static ParticleState[] GenerateSphere(int particleNum, Vector3 centerPos, float radius) Parameters Type Name Description Int32 particleNum The number of particles to generate. Vector3 centerPos The center position for generating particles. Single radius The radius of the sphere. Returns Type Description ParticleState [] An array of ParticleState representing the generated particles."
  },
  "api/ParticlePhysics.Solver.html": {
    "href": "api/ParticlePhysics.Solver.html",
    "title": "Namespace ParticlePhysics.Solver | Particle Physics",
    "keywords": "Namespace ParticlePhysics.Solver Classes SandPhysicsSolver This class simulates particle behaviour based on the MolecularDynamics method. Structs ObjectCollisionForce Represents the force and torque generated due to object collision. ParticleCollisionForce Represents the force and torque generated due to particle collision. TerrainCollisionForce Represents the force and torque generated due to terrain collision."
  },
  "api/ParticlePhysics.Solver.ObjectCollisionForce.html": {
    "href": "api/ParticlePhysics.Solver.ObjectCollisionForce.html",
    "title": "Struct ObjectCollisionForce | Particle Physics",
    "keywords": "Struct ObjectCollisionForce Represents the force and torque generated due to object collision. Namespace : ParticlePhysics.Solver Assembly : cs.temp.dll.dll Syntax public struct ObjectCollisionForce Constructors ObjectCollisionForce(Vector3, Vector3) The force generated due to object collision. Declaration public ObjectCollisionForce(Vector3 force, Vector3 torque) Parameters Type Name Description Vector3 force The force vector. Vector3 torque The torque vector. Fields force The force vector. Declaration public Vector3 force Field Value Type Description Vector3 torque The torque vector. Declaration public Vector3 torque Field Value Type Description Vector3 Methods Zero() Returns a new ObjectCollisionForce instance with zero force and torque. Declaration public static ObjectCollisionForce Zero() Returns Type Description ObjectCollisionForce A new ObjectCollisionForce instance with zero force and torque."
  },
  "api/ParticlePhysics.Solver.ParticleCollisionForce.html": {
    "href": "api/ParticlePhysics.Solver.ParticleCollisionForce.html",
    "title": "Struct ParticleCollisionForce | Particle Physics",
    "keywords": "Struct ParticleCollisionForce Represents the force and torque generated due to particle collision. Namespace : ParticlePhysics.Solver Assembly : cs.temp.dll.dll Syntax public struct ParticleCollisionForce Constructors ParticleCollisionForce(Vector3, Vector3) The force generated due to particle collision. Declaration public ParticleCollisionForce(Vector3 force, Vector3 torque) Parameters Type Name Description Vector3 force The force vector. Vector3 torque The torque vector. Fields force The force vector. Declaration public Vector3 force Field Value Type Description Vector3 torque The torque vector. Declaration public Vector3 torque Field Value Type Description Vector3 Methods Zero() Returns a new ParticleCollisionForce instance with zero force and torque. Declaration public static ParticleCollisionForce Zero() Returns Type Description ParticleCollisionForce A new ParticleCollisionForce instance with zero force and torque."
  },
  "api/ParticlePhysics.Solver.SandPhysicsSolver.html": {
    "href": "api/ParticlePhysics.Solver.SandPhysicsSolver.html",
    "title": "Class SandPhysicsSolver | Particle Physics",
    "keywords": "Class SandPhysicsSolver This class simulates particle behaviour based on the MolecularDynamics method. Inheritance Object SandPhysicsSolver Namespace : ParticlePhysics.Solver Assembly : cs.temp.dll.dll Syntax public class SandPhysicsSolver Constructors SandPhysicsSolver(Vector3, Single) Constructor for SandPhysicsSolver. Note: Please call SetMainParticle(), SetCollisionObjects() and SetTerrain() to register the required data before execution. Declaration public SandPhysicsSolver(Vector3 gravity, float maxAllowableTimestep = 0.005F) Parameters Type Name Description Vector3 gravity The gravity vector to be applied in the simulation. Single maxAllowableTimestep The maximum allowable timestep for the simulation. Fields _debugger Declaration public GraphicsBuffer _debugger Field Value Type Description GraphicsBuffer gravity Declaration public readonly Vector3 gravity Field Value Type Description Vector3 gridCellSize Declaration public static float gridCellSize Field Value Type Description Single gridSize Declaration public static Vector3 gridSize Field Value Type Description Vector3 maxAllowableTimestep Declaration public readonly float maxAllowableTimestep Field Value Type Description Single Properties ObjectCollisionForce Declaration public ObjectCollisionForce[] ObjectCollisionForce { get; } Property Value Type Description ObjectCollisionForce [] ParticleCollisionForce Declaration public ParticleCollisionForce[] ParticleCollisionForce { get; } Property Value Type Description ParticleCollisionForce [] RegisteredCollisionObjectArray Declaration public GameObject[] RegisteredCollisionObjectArray { get; } Property Value Type Description GameObject [] RegisteredCollisionObjectList Declaration public List<GameObject> RegisteredCollisionObjectList { get; } Property Value Type Description List < GameObject > RegisteredParticles Declaration public ParticleBuffer RegisteredParticles { get; } Property Value Type Description ParticleBuffer TerrainCollisionForce Declaration public TerrainCollisionForce[] TerrainCollisionForce { get; } Property Value Type Description TerrainCollisionForce [] Methods Release() Method to release the resources used by the SandPhysicsSolver. Declaration public void Release() SetCollisionObjects(GameObject[]) Set the collision objects to be used in the simulation. Declaration public void SetCollisionObjects(GameObject[] objects) Parameters Type Name Description GameObject [] objects An array of GameObjects representing the collision objects. SetFieldTerrain(Terrain, Vector3) Set the terrain data to be used in the simulation. Declaration public void SetFieldTerrain(Terrain terrain, Vector3 gridCenter) Parameters Type Name Description Terrain terrain The Terrain object representing the terrain data. Vector3 gridCenter The center position of the grid for collision detection. SetMainParticle(ParticleBuffer) Set the main particle buffer for the simulation. Note: If no particle buffer is provided, a default tetrahedron particle buffer will be generated. Declaration public void SetMainParticle(ParticleBuffer particle = null) Parameters Type Name Description ParticleBuffer particle The main particle buffer to be used for the simulation. UpdateParticle(ref ParticleBuffer, GraphicsBuffer) Update the particle buffer with collision forces and integrate the particles' positions. Declaration public void UpdateParticle(ref ParticleBuffer particles, GraphicsBuffer terrain) Parameters Type Name Description ParticleBuffer particles The ParticleBuffer to be updated. GraphicsBuffer terrain The GraphicsBuffer representing the terrain data."
  },
  "api/ParticlePhysics.Solver.TerrainCollisionForce.html": {
    "href": "api/ParticlePhysics.Solver.TerrainCollisionForce.html",
    "title": "Struct TerrainCollisionForce | Particle Physics",
    "keywords": "Struct TerrainCollisionForce Represents the force and torque generated due to terrain collision. Namespace : ParticlePhysics.Solver Assembly : cs.temp.dll.dll Syntax public struct TerrainCollisionForce Constructors TerrainCollisionForce(Vector3, Vector3) The force generated due to terrain collision. Declaration public TerrainCollisionForce(Vector3 force, Vector3 torque) Parameters Type Name Description Vector3 force The force vector. Vector3 torque The torque vector. Fields force The force vector. Declaration public Vector3 force Field Value Type Description Vector3 torque The torque vector. Declaration public Vector3 torque Field Value Type Description Vector3 Methods Zero() Returns a new TerrainCollisionForce instance with zero force and torque. Declaration public static TerrainCollisionForce Zero() Returns Type Description TerrainCollisionForce A new TerrainCollisionForce instance with zero force and torque."
  },
  "api/ParticlePhysics.Substance.CubeSubstance.html": {
    "href": "api/ParticlePhysics.Substance.CubeSubstance.html",
    "title": "Class CubeSubstance | Particle Physics",
    "keywords": "Class CubeSubstance Represents a cube-shaped particle substance. Inheritance Object ParticleSubstance CubeSubstance Inherited Members ParticleSubstance.elements ParticleSubstance.mu ParticleSubstance.totalMass ParticleSubstance.centerOfMass ParticleSubstance.inertialMoment ParticleSubstance.Elements ParticleSubstance.TotalMass ParticleSubstance.Mu ParticleSubstance.CenterOfMass ParticleSubstance.InertialMoment ParticleSubstance.InertialMoment4x4 ParticleSubstance.Release() ParticleSubstance.CalculateElementMass(Single, Single) ParticleSubstance.CalculateInverseInertialMoment(ParticleElement[]) ParticleSubstance.CalculateTotalMass(ParticleElement[], Single) ParticleSubstance.CalculateCenterOfMass(ParticleElement[]) Namespace : ParticlePhysics.Substance Assembly : cs.temp.dll.dll Syntax public class CubeSubstance : ParticleSubstance Constructors CubeSubstance(Single, Single, Single) Initializes a new instance of the CubeSubstance class with the given parameters. Declaration public CubeSubstance(float radius = 0.04F, float density = 2000F, float mu = 0.05F) Parameters Type Name Description Single radius The radius of the cube substance particles. Single density The density of the cube substance particles. Single mu The mu value of the cube substance particles. Methods SetElements(Single, Single) Sets the elements for the cube substance particles based on the given particle radius and density. Declaration protected override ParticleElement[] SetElements(float particleRadius, float particleDensity) Parameters Type Name Description Single particleRadius The radius of the cube substance particles. Single particleDensity The density of the cube substance particles. Returns Type Description ParticleElement [] An array of ParticleElement representing the elements of the cube substance particles. Overrides ParticleSubstance.SetElements(Single, Single)"
  },
  "api/ParticlePhysics.Substance.html": {
    "href": "api/ParticlePhysics.Substance.html",
    "title": "Namespace ParticlePhysics.Substance | Particle Physics",
    "keywords": "Namespace ParticlePhysics.Substance Classes CubeSubstance Represents a cube-shaped particle substance. ParticleSubstance The base class for particle substances. SimpleSubstance Represents a simple particle substance. TetrahedronSubstance Represents a tetrahedron substance used in particle physics simulations."
  },
  "api/ParticlePhysics.Substance.ParticleSubstance.html": {
    "href": "api/ParticlePhysics.Substance.ParticleSubstance.html",
    "title": "Class ParticleSubstance | Particle Physics",
    "keywords": "Class ParticleSubstance The base class for particle substances. Inheritance Object ParticleSubstance CubeSubstance SimpleSubstance TetrahedronSubstance Namespace : ParticlePhysics.Substance Assembly : cs.temp.dll.dll Syntax public abstract class ParticleSubstance Fields centerOfMass Center of mass of the particle substance. Declaration protected float3 centerOfMass Field Value Type Description float3 elements Graphics buffer for elements. Declaration protected GraphicsBuffer elements Field Value Type Description GraphicsBuffer inertialMoment Inertial moment of the particle substance. Declaration protected float3x3 inertialMoment Field Value Type Description float3x3 mu Coefficient of friction. Declaration protected float mu Field Value Type Description Single totalMass Total mass of the particle substance. Declaration protected float totalMass Field Value Type Description Single Properties CenterOfMass Accessor for the center of mass of the particle substance. Declaration public Vector3 CenterOfMass { get; } Property Value Type Description Vector3 Elements Accessor for the graphics buffer containing elements. Declaration public GraphicsBuffer Elements { get; } Property Value Type Description GraphicsBuffer InertialMoment Accessor for the inertial moment of the particle substance. Declaration public float3x3 InertialMoment { get; } Property Value Type Description float3x3 InertialMoment4x4 Accessor for the inertial moment as a 4x4 matrix. Declaration public Matrix4x4 InertialMoment4x4 { get; } Property Value Type Description Matrix4x4 Mu Accessor for the coefficient of friction. Declaration public float Mu { get; } Property Value Type Description Single TotalMass Accessor for the total mass of the particle substance. Declaration public float TotalMass { get; } Property Value Type Description Single Methods CalculateCenterOfMass(ParticleElement[]) Calculate the center of mass of the particle substance based on its elements. Declaration protected float3 CalculateCenterOfMass(ParticleElement[] elements) Parameters Type Name Description ParticleElement [] elements Array of particle elements. Returns Type Description float3 The center of mass of the particle substance. CalculateElementMass(Single, Single) Calculate the mass of an element based on its radius and density. Declaration protected float CalculateElementMass(float radius, float density) Parameters Type Name Description Single radius Radius of the element. Single density Density of the element. Returns Type Description Single The mass of the element. CalculateInverseInertialMoment(ParticleElement[]) Calculate the inverse inertial moment of the particle substance based on its elements. Declaration protected float3x3 CalculateInverseInertialMoment(ParticleElement[] elements) Parameters Type Name Description ParticleElement [] elements Array of particle elements. Returns Type Description float3x3 The inverse inertial moment of the particle substance. CalculateTotalMass(ParticleElement[], Single) Calculate the total mass of the particle substance based on its elements and density. Declaration protected float CalculateTotalMass(ParticleElement[] elements, float density) Parameters Type Name Description ParticleElement [] elements Array of particle elements. Single density Density of the particle substance. Returns Type Description Single The total mass of the particle substance. Release() Release the elements graphics buffer. Declaration public void Release() SetElements(Single, Single) Abstract method to be implemented by derived classes to set the elements of the particle substance. Declaration protected abstract ParticleElement[] SetElements(float particleRadius, float particleDensity) Parameters Type Name Description Single particleRadius Radius of the particles. Single particleDensity Density of the particles. Returns Type Description ParticleElement [] An array of particle elements."
  },
  "api/ParticlePhysics.Substance.SimpleSubstance.html": {
    "href": "api/ParticlePhysics.Substance.SimpleSubstance.html",
    "title": "Class SimpleSubstance | Particle Physics",
    "keywords": "Class SimpleSubstance Represents a simple particle substance. Inheritance Object ParticleSubstance SimpleSubstance Inherited Members ParticleSubstance.elements ParticleSubstance.mu ParticleSubstance.totalMass ParticleSubstance.centerOfMass ParticleSubstance.inertialMoment ParticleSubstance.Elements ParticleSubstance.TotalMass ParticleSubstance.Mu ParticleSubstance.CenterOfMass ParticleSubstance.InertialMoment ParticleSubstance.InertialMoment4x4 ParticleSubstance.Release() ParticleSubstance.CalculateElementMass(Single, Single) ParticleSubstance.CalculateInverseInertialMoment(ParticleElement[]) ParticleSubstance.CalculateTotalMass(ParticleElement[], Single) ParticleSubstance.CalculateCenterOfMass(ParticleElement[]) Namespace : ParticlePhysics.Substance Assembly : cs.temp.dll.dll Syntax public class SimpleSubstance : ParticleSubstance Constructors SimpleSubstance(Single, Single, Single) Constructor for SimpleSubstance class. Declaration public SimpleSubstance(float radius = 0.04F, float density = 2000F, float mu = 0.05F) Parameters Type Name Description Single radius The radius of the particles. Single density The density of the substance. Single mu The coefficient of friction. Methods SetElements(Single, Single) Sets up the particle elements for the substance. Declaration protected override ParticleElement[] SetElements(float particleRadius, float particleDensity) Parameters Type Name Description Single particleRadius The radius of the particles. Single particleDensity The density of the substance. Returns Type Description ParticleElement [] An array of ParticleElement representing the elements. Overrides ParticleSubstance.SetElements(Single, Single)"
  },
  "api/ParticlePhysics.Substance.TetrahedronSubstance.html": {
    "href": "api/ParticlePhysics.Substance.TetrahedronSubstance.html",
    "title": "Class TetrahedronSubstance | Particle Physics",
    "keywords": "Class TetrahedronSubstance Represents a tetrahedron substance used in particle physics simulations. Inheritance Object ParticleSubstance TetrahedronSubstance Inherited Members ParticleSubstance.elements ParticleSubstance.mu ParticleSubstance.totalMass ParticleSubstance.centerOfMass ParticleSubstance.inertialMoment ParticleSubstance.Elements ParticleSubstance.TotalMass ParticleSubstance.Mu ParticleSubstance.CenterOfMass ParticleSubstance.InertialMoment ParticleSubstance.InertialMoment4x4 ParticleSubstance.Release() ParticleSubstance.CalculateElementMass(Single, Single) ParticleSubstance.CalculateInverseInertialMoment(ParticleElement[]) ParticleSubstance.CalculateTotalMass(ParticleElement[], Single) ParticleSubstance.CalculateCenterOfMass(ParticleElement[]) Namespace : ParticlePhysics.Substance Assembly : cs.temp.dll.dll Syntax public class TetrahedronSubstance : ParticleSubstance Constructors TetrahedronSubstance(Single, Single, Single) Initializes a new instance of the TetrahedronSubstance class with the specified parameters. Declaration public TetrahedronSubstance(float radius = 0.04F, float density = 2000F, float mu = 0.05F) Parameters Type Name Description Single radius The radius of the tetrahedron's particle elements. Single density The density of the tetrahedron substance. Single mu The friction coefficient of the tetrahedron substance. Methods SetElements(Single, Single) Sets the particle elements of the tetrahedron substance based on the given particle radius and density. Declaration protected override ParticleElement[] SetElements(float particleRadius, float particleDensity) Parameters Type Name Description Single particleRadius The radius of the tetrahedron's particle elements. Single particleDensity The density of the tetrahedron substance. Returns Type Description ParticleElement [] An array of ParticleElement representing the tetrahedron's particle elements. Overrides ParticleSubstance.SetElements(Single, Single)"
  },
  "api/ParticlePhysics.TerrainBuffer.html": {
    "href": "api/ParticlePhysics.TerrainBuffer.html",
    "title": "Class TerrainBuffer | Particle Physics",
    "keywords": "Class TerrainBuffer Inheritance Object TerrainBuffer Namespace : ParticlePhysics Assembly : cs.temp.dll.dll Syntax public class TerrainBuffer Constructors TerrainBuffer(Terrain) Declaration public TerrainBuffer(Terrain terrain) Parameters Type Name Description Terrain terrain Fields buffer Declaration public GraphicsBuffer buffer Field Value Type Description GraphicsBuffer Methods Release() Declaration public void Release()"
  },
  "api/ParticlePhysics.TerrainType.html": {
    "href": "api/ParticlePhysics.TerrainType.html",
    "title": "Struct TerrainType | Particle Physics",
    "keywords": "Struct TerrainType Namespace : ParticlePhysics Assembly : cs.temp.dll.dll Syntax public struct TerrainType Fields height Declaration public float height Field Value Type Description Single normal Declaration public Vector3 normal Field Value Type Description Vector3 Methods GenerateFromTerrain(Terrain) Declaration public static TerrainType[] GenerateFromTerrain(Terrain terrain) Parameters Type Name Description Terrain terrain Returns Type Description TerrainType []"
  },
  "api/ParticlePhysics.Utils.GridSearch-1.html": {
    "href": "api/ParticlePhysics.Utils.GridSearch-1.html",
    "title": "Class GridSearch<T> | Particle Physics",
    "keywords": "Class GridSearch<T> Provides a grid-based search for nearest neighbors. Inheritance Object GridSearchBase GridSearch<T> Inherited Members GridSearchBase.GridSearchCS GridSearchBase.gridBuffer GridSearchBase.gridPingPongBuffer GridSearchBase.gridIndicesBuffer GridSearchBase.sortedObjectsBufferOutput GridSearchBase.numObjects GridSearchBase.threadGroupSize GridSearchBase.SIMULATION_BLOCK_SIZE_FOR_GRID GridSearchBase.totalCellNum GridSearchBase.cellSize GridSearchBase.gridResolution GridSearchBase.TargetGridIndicesBuffer GridSearchBase.CellSize GridSearchBase.GridResolution GridSearchBase.Release() GridSearchBase.GridSort(GraphicsBuffer) GridSearchBase.GridSort(GraphicsBuffer, Transform) Namespace : ParticlePhysics.Utils Assembly : cs.temp.dll.dll Syntax public class GridSearch<T> : GridSearchBase where T : struct Type Parameters Name Description T The type of data being searched. Constructors GridSearch(Int32, Vector3, Single) Initializes a new instance of the GridSearch class with the specified parameters. Declaration public GridSearch(int objNum, Vector3 gridSize, float gridCellSize) Parameters Type Name Description Int32 objNum The number of objects to search. Vector3 gridSize The size of the grid search area as a Vector3. Single gridCellSize The size of each grid cell. Methods GetCellIndices(UInt32) Gets the cell indices for the specified cell number. Declaration public Uint2 GetCellIndices(uint cellNum) Parameters Type Name Description UInt32 cellNum The cell number. Returns Type Description Uint2 The Uint2 structure representing the cell indices. InitializeBuffer(Int32) Initializes the graphics buffers used for grid search. Declaration protected override void InitializeBuffer(int objectNum) Parameters Type Name Description Int32 objectNum The number of objects to search. Overrides GridSearchBase.InitializeBuffer(Int32) SetCSVariables() Sets the variables required for the compute shader used in grid search. Declaration protected override void SetCSVariables() Overrides GridSearchBase.SetCSVariables()"
  },
  "api/ParticlePhysics.Utils.GridSearchBase.html": {
    "href": "api/ParticlePhysics.Utils.GridSearchBase.html",
    "title": "Class GridSearchBase | Particle Physics",
    "keywords": "Class GridSearchBase Base class for grid-based search operations. Inheritance Object GridSearchBase GridSearch<T> Namespace : ParticlePhysics.Utils Assembly : cs.temp.dll.dll Syntax public abstract class GridSearchBase Constructors GridSearchBase(Int32) Constructor for GridSearchBase. Declaration public GridSearchBase(int objNum) Parameters Type Name Description Int32 objNum The number of objects to be sorted. Fields cellSize Size of each cell in the grid. Declaration protected float cellSize Field Value Type Description Single gridBuffer Graphics buffer for storing grid data. Declaration protected GraphicsBuffer gridBuffer Field Value Type Description GraphicsBuffer gridIndicesBuffer Graphics buffer for storing grid indices. Declaration protected GraphicsBuffer gridIndicesBuffer Field Value Type Description GraphicsBuffer gridPingPongBuffer Graphics buffer used for ping-pong operation during grid sorting. Declaration protected GraphicsBuffer gridPingPongBuffer Field Value Type Description GraphicsBuffer gridResolution Resolution of the grid in 3D space. Declaration protected Vector3 gridResolution Field Value Type Description Vector3 GridSearchCS The Compute Shader used for grid-based search operations. Declaration protected ComputeShader GridSearchCS Field Value Type Description ComputeShader numObjects Number of objects to be sorted. Declaration protected int numObjects Field Value Type Description Int32 SIMULATION_BLOCK_SIZE_FOR_GRID Constant block size for grid simulation. Declaration protected static readonly int SIMULATION_BLOCK_SIZE_FOR_GRID Field Value Type Description Int32 sortedObjectsBufferOutput Graphics buffer for output of sorted objects. Declaration protected GraphicsBuffer sortedObjectsBufferOutput Field Value Type Description GraphicsBuffer threadGroupSize The thread group size used for grid-based search. Declaration protected int threadGroupSize Field Value Type Description Int32 totalCellNum Total number of cells in the grid. Declaration protected int totalCellNum Field Value Type Description Int32 Properties CellSize Gets the size of each grid cell. Declaration public float CellSize { get; } Property Value Type Description Single GridResolution Gets the resolution of the grid in 3D space. Declaration public Vector3 GridResolution { get; } Property Value Type Description Vector3 TargetGridIndicesBuffer Gets the GraphicsBuffer for storing grid indices. Declaration public GraphicsBuffer TargetGridIndicesBuffer { get; } Property Value Type Description GraphicsBuffer Methods GridSort(ref GraphicsBuffer) Sorts objects based on their positions using the grid-based search approach. Declaration public void GridSort(ref GraphicsBuffer objectsBufferInput) Parameters Type Name Description GraphicsBuffer objectsBufferInput The input buffer containing objects to be sorted. GridSort(ref GraphicsBuffer, Transform) Sorts objects based on their positions using the grid-based search approach with a transformation. Declaration public void GridSort(ref GraphicsBuffer objectsBufferInput, Transform gridTF) Parameters Type Name Description GraphicsBuffer objectsBufferInput The input buffer containing objects to be sorted. Transform gridTF The transform of the grid. InitializeBuffer(Int32) Initialize buffer based on the number of objects. Declaration protected abstract void InitializeBuffer(int objectNum) Parameters Type Name Description Int32 objectNum The number of objects to be initialized. Release() Release all allocated resources. Declaration public void Release() SetCSVariables() Set the necessary compute shader variables. Declaration protected abstract void SetCSVariables()"
  },
  "api/ParticlePhysics.Utils.html": {
    "href": "api/ParticlePhysics.Utils.html",
    "title": "Namespace ParticlePhysics.Utils | Particle Physics",
    "keywords": "Namespace ParticlePhysics.Utils Classes GridSearch<T> Provides a grid-based search for nearest neighbors. GridSearchBase Base class for grid-based search operations. Structs Uint2 Represents a 2D unsigned integer vector."
  },
  "api/ParticlePhysics.Utils.Uint2.html": {
    "href": "api/ParticlePhysics.Utils.Uint2.html",
    "title": "Struct Uint2 | Particle Physics",
    "keywords": "Struct Uint2 Represents a 2D unsigned integer vector. Namespace : ParticlePhysics.Utils Assembly : cs.temp.dll.dll Syntax public struct Uint2 Fields x The X component of the vector. Declaration public uint x Field Value Type Description UInt32 y The Y component of the vector. Declaration public uint y Field Value Type Description UInt32"
  },
  "index.html": {
    "href": "index.html",
    "title": "ParticlePhysics | Particle Physics",
    "keywords": "ParticlePhysics ParticlePhysics simulate the dynamics of sand-like particles in Unity. This is an implementation of the research paper \"Particle-Based Simulation of Granular Materials\" . DEMO Requirement Package com.unity.mathematics: 1.2.6 com.unity.visualeffectgraph: 12.1.0 Installation Only Package Please install the .unitypackage distributed from the release page into your project. With Example Clone this repository, and copy example files(./Assets/Examples) into your project. Note This project is under development. I'm not responsible for any damages resulting from the use of this software. Author Tomohiro Kuwano E-mail：ku_engineer_wa@yahoo.com License Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | Particle Physics",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | Particle Physics",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}