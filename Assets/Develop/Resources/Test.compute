#pragma kernel InitCS
#pragma kernel MainCS

struct ParticleType
{
	float3 position;
	float3 velocity;
	float4 orientation;
	float3 angularVelocity;
};

cbuffer CB
{
	float4x4 _ObjectTF;
};

shared float4 hoge;

interface iBaseLight
{
	float3 IlluminateAmbient(float3 vNormal);
	float3 IlluminateDiffuse(float3 vNormal);
	float3 IlluminateSpecular(float3 vNormal, int specularPower);
};

interface iBaseMaterial
{
	float3 GetAmbientColor(float2 vTexcoord);
   
	float3 GetDiffuseColor(float2 vTexcoord);

	int GetSpecularPower();

};

class cAmbientLight : iBaseLight
{
	float3 m_vLightColor;
	bool m_bEnable;
	float3 IlluminateAmbient(float3 vNormal);
	float3 IlluminateDiffuse(float3 vNormal);
	float3 IlluminateSpecular(float3 vNormal, int specularPower);
};

class cHemiAmbientLight : cAmbientLight
{
	float4 m_vGroundColor;
	float4 m_vDirUp;
	float3 IlluminateAmbient(float3 vNormal);
};

StructuredBuffer<ParticleType> _bufferRead;
RWStructuredBuffer<ParticleType> _bufferWrite;

RWStructuredBuffer<float4> _debug;

[numthreads(1024,1,1)]
void InitCS (uint3 threadID : SV_DispatchThreadID)
{
	
	hoge = float4(1, 2, 3, 4);
	//_debug[threadID.x] = hoge;
}

[numthreads(1024, 1, 1)]
void MainCS(uint3 threadID : SV_DispatchThreadID)
{
	_debug[threadID.x] = hoge;
	_bufferWrite[threadID.x].position = mul(_ObjectTF, float4(_bufferRead[threadID.x].position, 1)).xyz;
}
